Understanding the concept of REST API.
### API - application programming interface
    set of rule define how applications or devices can connect to and communicate with each other.

### REST - representational state transfer
    software architecure that impose condition on how an API should work

=> REST API - an API that comforms to the design priciple of REST.

### 6 REST principles 
1. Uniform interface
2. Client-server decoupling 
3. Statelessness
4. Cacheability
5. Layered system architecture
6. Code on demand


---
Tools that support API design.
 - Amazon api gateway
 - APImetrics
 - Assertible
 - Possman
  
---
Understanding the Flask framework.

    Flask Framework is web framework written in python, that allows python programmer to build web applications.Flask is a micro-framework it mean it use few external libraries and only provide the essentinal for web development.
    Flask is based on the Werkzeug WSGI toolkit and the Jinja2 template engine

---
Applications of Flask (where Flask is applied, its strengths and limitations).

### Features and advantages of Flask:
- Server development
- Debugging development
- Built-in support for unit testing
- Jinja2 templates
- RESTful request dispatch
- Cookie security support
- Full WSGI compliant
- Extensive documentation
- Unicode-based
- Compatibility with Google application-based tooling
- Many open-source extensions for desired features
- Modular and lightweight design
- ORM-agnostic
- High flexibility
- Provides HTTP request handling
- Unique and concise API
- Easy deployment

### Disadvantages of Flask:
- Scalability limitations
- Lack of built-in components
- Steeper learning curve
- Minimalist approach, lack of "batteries included"
- Limited built-in security features
- Reliance on external libraries
  
---
Designing and initializing simple REST APIs using Flask and how to test them.

---
Designing an API that takes an input as a list and returns the sorted list using pre-implemented sorting algorithms.

---
Getting familiar with SQLAlchemy for storing data in an SQL database.

---
Configuring Flask-SQLAlchemy with a Flask application.

---
Creating and updating models.

---
Inserting data into the database.
Data migration using Alembic and Flask-Migrate.

---
Building a Flask API to manage bugs (Get, Create, Update, Delete) based on the previously acquired knowledge.

