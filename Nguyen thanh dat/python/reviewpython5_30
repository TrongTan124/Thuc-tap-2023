# Python 
## Basic 
### Syntax
1. declare instance,variable
2. list
3. for i loop, for each loop
4. while
5. try except
6. if else
7. regression
8. import model
### Class
1. init an object 
2. update value in object
3. use list manage object 
4. some control method like find and add

## Data type 
### List 
1. ordered,mutable collection of elements 
2. contains diffent types include list
3. start and end with [] separeate by ","

### Tuple 
1. ordered, imutable collection of element 
2. contains diffrent type include tuple
3. start and end with () separate by ","

### Set 
1. unordered collection of unique elements 
2. automatically eliminate duplicate elements
3. mainly used for membership testing and   eliminating duplicates.

### Dictionary 
1. unordered collection of key-value pairs
2. Each key in a dictionary must be unique and immutable
3. Values in a dictionary can be of any data type
4. Dictionaries are accessed using keys rather than indices
## Module & Package
### Module 
1. Single file contain code organized and help reuse code encapsulating related functionality into a separate file
2. break down program into smaller,  manageable units, making it easier to understand, maintain, and reuse.
### Package
1. way to organize module into directory hierarchy. 
2. Package one or more module
3. have special file is __init__.py to mark the directory as a Python package
## Decorator 
    A Python decorator is a function that takes in a function and returns it by adding some functionality
- a decorator is a callable that returns a callable
- @ Symbol With Decorator : note function run before an function
---
# OOP python
## Class
    creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class
### _ _ init _ _ method
- similar to contructor used to initializing the object’s state
- a constructor also contains a collection of statements

Instance variables are for data, unique to each instance and class variables are for attributes and methods shared by all instances of the class
### inheritance
- When declaring a class we pass a class inside it like class Employer(Person)
- Multiple inheritance: When a child class inherits from multiple parent classes, it is called multiple inheritance. 
### Encapsulation
    In Python, we don’t have direct access modifiers like public, private, and protected. We can achieve this by using single underscore and double underscores.
Python provides three types of access modifiers private, public, and protected.
- Public Member: Accessible anywhere from uotside oclass.
- Private Member: Accessible within the class
- Protected Member: Accessible within the class and its sub-classes
### Polymorphism 
    same function use in many type
### Interface
    There is no built-in keyword for defining interfaces like in some other programming languages

    An informal Python interface is a class that defines overridable methods with no tight enforcement
@abstractmedthod use above declare a function
and function no need logic 
### static method & class method 
denote by @staticmethod and @classmethod
### Class method 
A class method receives the class as an implicit first argument, just like an instance method receives the instance 
We generally use class method to create factory methods. Factory methods return class objects ( similar to a constructor ) for different use cases.

### Static method 
A static method does not receive an implicit first argument. 
A static method can’t access or modify the class state.
We generally use static methods to create utility functions.





